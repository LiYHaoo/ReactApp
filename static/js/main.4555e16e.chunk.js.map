{"version":3,"sources":["components/Icon/index.js","App.js","serviceWorker.js","index.js"],"names":["defaultProps","type","spin","Icon","props","className","color","style","other","cls","classnames","_style","container","display","maxWidth","margin","justifyContent","flexWrap","itemContainer","width","height","alignItems","icons","App","map","item","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y2BAkBA,IAAMA,EAAe,CACjBC,KAAM,GACNC,MAAM,GAkBKC,EAfF,WAA2B,IAA1BC,EAAyB,uDAAjBJ,EACVC,EAAkDG,EAAlDH,KAAMI,EAA4CD,EAA5CC,UAAWH,EAAiCE,EAAjCF,KAAMI,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADb,YACuBJ,EADvB,6CAG7BK,EAAMC,IAAW,aACnB,MAAQ,EACR,cAAeR,GAAiB,YAATD,GAFL,eAGTA,IAAS,GACnBI,GACGM,EAAM,KAAQJ,EAAR,CAAeD,UAE3B,OACI,qCAAGD,UAAWI,GAASD,EAAvB,CAA8BD,MAAOI,MC/BvCC,EAAY,CAChBC,QAAS,OACTC,SAAU,QACVC,OAAQ,OACRC,eAAgB,eAChBC,SAAU,QAGNC,EAAgB,CACpBC,MAAO,OACPC,OAAQ,OACRP,QAAS,OACTG,eAAgB,SAChBK,WAAY,UAGVC,EAAQ,CAAC,QAAQ,QAAQ,SAAS,WAAW,YAAY,UAAU,mBAAmB,yBAAyB,eAiBpGC,E,iLAbX,OACE,yBAAKhB,MAAOK,GACV,kBAAC,EAAD,CAAMX,KAAK,MAAMC,MAAI,IACpBoB,EAAME,IAAI,SAACC,EAAMC,GAAP,OACT,yBAAKC,IAAKD,EAAGnB,MAAOW,GAClB,kBAAC,EAAD,CAAMjB,KAAMwB,Y,GAPNG,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4555e16e.chunk.js","sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\nimport './style.css';\r\n\r\n// 拼接所有参数\r\n// classnames('foo', 'bar'); // 'foo bar'\r\n\r\n// classnames({\r\n//     foo: true,\r\n//     bar: false,\r\n// }); // 'foo'\r\n\r\n// classnames('foo', {\r\n//     bar: true,\r\n//     tag: true,\r\n//     mm: false\r\n// }); // 'foo bar tag'\r\n\r\nconst defaultProps = {\r\n    type: '',\r\n    spin: false, // 是否旋转\r\n}\r\n\r\nconst Icon = (props = defaultProps) => {\r\n    const { type, className, spin, color, style, ...other } = props;\r\n\r\n    const cls = classnames({\r\n        'icon': true,\r\n        'icon-spin': !!spin || type === 'loading',\r\n        [`icon-${type}`]: true\r\n    }, className);\r\n    const _style = { ...style, color };\r\n\r\n    return (\r\n        <i className={cls} {...other} style={_style}></i>\r\n    )\r\n}\r\n\r\nexport default Icon;\r\n","import React, { Component } from 'react';\nimport Icon from './components/Icon/index';\n\nconst container = {\n  display: 'flex',\n  maxWidth: '300px',\n  margin: 'auto',\n  justifyContent: 'space-around',\n  flexWrap: 'wrap'\n}\n\nconst itemContainer = {\n  width: '40px',\n  height: '40px',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n}\n\nlet icons = [\"close\",'trash','return','optional','must-fill','warning','modular-workshop','module-pool-management','full-screen'];\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={container}>\n        <Icon type=\"add\" spin />\n        {icons.map((item, i) => (\n          <div key={i} style={itemContainer}>\n            <Icon type={item} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}